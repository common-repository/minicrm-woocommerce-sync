<?php

// Prevent direct access
if (!defined ('ABSPATH')) {
    exit;
}

try {

    // check if plugin is loaded
    if (!class_exists ('MiniCRM_WooCommerce_Plugin')) {
        throw new Exception ('Plugin is not loaded.');
    }

    // authorize by ip
    MiniCRM_WooCommerce_Plugin::validate_ip ($_SERVER ['REMOTE_ADDR']);

    // get customer id
    if (empty ($_GET [MiniCRM_WooCommerce_Plugin::FEED_QUERY_VAR]))
        throw new Exception ('Missing query parameter');
    $query_value = $_GET [MiniCRM_WooCommerce_Plugin::FEED_QUERY_VAR];
    $requested_project = preg_replace (
        '/^(all|\d+)\.xml$/',
        '$1',
        $query_value
    );
    if ($requested_project === $query_value) {
        throw new Exception ('Invalid project parameter.');
    }

    // get category id
    $category_id = MiniCRM_WooCommerce_Plugin::get_option ('category_id');
    if (empty ($category_id)) {
        throw new Exception ('Missing option "category_id"');
    }

    // get folder name
    $folder_name = MiniCRM_WooCommerce_Plugin::get_option ('folder_name');
    if (empty ($folder_name)) {
        throw new Exception ('Missing option "folder_name"');
    }

    // get locale
    $locale = MiniCRM_WooCommerce_Plugin::get_option ('locale');
    if (empty ($locale)) {
        throw new Exception ('Missing option "locale"');
    }

    // Get all orders
    $order_filters = array (
        'limit' => -1,
        'orderby' => 'modified',
        'order' => 'DESC',
        'type' => 'shop_order',
    );
    if ($requested_project === 'all') {
        $wc_orders = wc_get_orders ($order_filters);
    }

    // Get single order or orders of single customer
    else {

        // Get orders of single customer
        if ($requested_project < MiniCRM_WooCommerce_Plugin::GUEST_OFFSET) {
            $order_filters ['customer_id'] = $requested_project;
            $wc_orders = wc_get_orders ($order_filters);
        }

        // Get single order
        else {
            $requested_order_id = $requested_project;
            $requested_order_id -= MiniCRM_WooCommerce_Plugin::GUEST_OFFSET;
            $wc_orders = array ();
            $wc_order = wc_get_order ($requested_order_id);
            if ($wc_order) $wc_orders [] = $wc_order;
        }
    }

    // group orders by customers
    $customers = array ();
    foreach ($wc_orders as $wc_order) {
        $wc_order = $wc_order->get_data ();
        $project_id = MiniCRM_WooCommerce_Plugin::get_order_project_id ($wc_order);

        // init customer item
        if (empty ($customers [$project_id])) {
            $customers [$project_id] = array ();
        }

        // add order to customer
        $customers [$project_id] [] = $wc_order;
    }

    // build xml
    global $woocommerce, $wp_version;
    $HeadersSent = headers_sent($HeadersSentFrom);
    if($HeadersSent) {
        $HeadersSentFrom = preg_replace("/[^A-Za-z0-9., ]/", '', $HeadersSentFrom);
        $HeadersWarning = ", headers already sent from: $HeadersSentFrom";
    } else {
        $HeadersWarning = "";
    }
    $PluginVersion = "1.3.5";
    $WPVersion = $wp_version;
    $WCVersion = $woocommerce->version;
    $PHPVersion = phpversion();
    $OSVersion = preg_replace("/[^A-Za-z0-9., ]/", '', php_uname());
    $MD5F = md5_file(__FILE__);
    $MD5P = md5_file(plugin_dir_path(__FILE__)."minicrm-woocommerce-sync.php");
    $init_xml_source = '<?xml version="1.0" encoding="utf-8"?>' .
	"<!-- Generated by MiniCRM Woocommerce Sync plugin $PluginVersion, Wordpress $WPVersion, Woocommerce $WCVersion, PHP $PHPVersion, OS $OSVersion, F $MD5F, P $MD5P $HeadersWarning -->" .
	'<Projects/>';
    $projects = new SimpleXMLElement ($init_xml_source);
    $timezone = new DateTimeZone ('Europe/Budapest');
    foreach ($customers as $customer_id => $customer_orders) {

        // no orders for customer
        if (!count ($customer_orders)) {
            continue;
        }

        // init xml
        $latest_order = $customer_orders [0];
        $latest_billing = $latest_order ['billing'];
        $business_name = MiniCRM_WooCommerce_Plugin::get_billing_name (
            $locale,
            $latest_order
        );
        $project = $projects->addChild ('Project');
        $project->addAttribute ('Id', $customer_id);
        $project->Name = $business_name;
        $project->CategoryId = $category_id;
        switch (count ($customer_orders)) {
            case 0:  $status_key = 'registered'; break;
            case 1:  $status_key = 'new';        break;
            default: $status_key = 'promising';  break;
        }
        $status_id = MiniCRM_WooCommerce_Plugin::get_local_project_status (
            $locale,
            $status_key
        );
        $project->StatusId = $status_id;

        // Business (optional)
        if ($latest_billing ['company']) {
            $business = $project->addChild ('Business');

            // Name
            $business->Name = $latest_billing ['company'];

            // Vat number
            $vat_number = null;
            $active_plugins = get_option ('active_plugins');
            if (
                in_array (
                    'surbma-magyar-woocommerce/surbma-magyar-woocommerce.php',
                    $active_plugins
                )
            ) {
                foreach ($latest_order ['meta_data'] as $meta_data) {
                    if ($meta_data->key === '_billing_tax_number') {
                        $vat_number = $meta_data->value;
                    }
                }
            }
            $business->VatNumber = $vat_number;

            // Address
            $addresses = $business->addChild ('Addresses');
            $address = $addresses->addChild ('Address');
            $address->PostalCode = $latest_billing ['postcode'];
            $address->City = $latest_billing ['city'];
            $address->addChild (
                'Address',
                trim ("$latest_billing[address_1] $latest_billing[address_2]")
            );

            // Email
            $emails = $business->addChild ('Emails');
            $email = $emails->addChild ('Email');
            $email->Value = $latest_billing ['email'];

            // Phone
            $phones = $business->addChild ('Phones');
            $phone = $phones->addChild ('Phone');
            $phone->Value = $latest_billing ['phone'];
        }

        // Contact name, email and phone
        $contacts = $project->addChild ('Contacts');
        $contact = $contacts->addChild ('Contact');
        $contact->FirstName = $latest_billing ['first_name'];
        $contact->LastName = $latest_billing ['last_name'];
        $emails = $contact->addChild ('Emails');
        $email = $emails->addChild ('Email');
        $email->Value = $latest_billing ['email'];
        $phones = $contact->addChild ('Phones');
        $phone = $phones->addChild ('Phone');
        $phone->Value = $latest_billing ['phone'];

        // Orders
        $orders = $project->addChild ('Orders');
        foreach ($customer_orders as $customer_order) {

            // Init WC_Order object
            $order_obj = new WC_Order ($customer_order ['id']);

            // init Order
            $order = $orders->addChild ('Order');
            $order->addAttribute ('Id', $customer_order ['id']);
            $order->Number = $customer_order ['id'];
            $order->CurrencyCode = $customer_order ['currency'];
            $order->Language = "_{$locale}";
            $completed = $customer_order ['date_created'];
            $completed->setTimezone ($timezone);
            $order->Performance = $completed->date ('Y-m-d H:i:s');
            $order->addChild (
                'Status',
                MiniCRM_WooCommerce_Plugin::convert_order_status ($customer_order ['status'])
            );

            // Payment method
            $wc_payment_method_id = $order_obj->get_payment_method ();
            try {
                $mc_payment_method = MiniCRM_WooCommerce_Plugin::parsed_payment_method ($wc_payment_method_id);
                $order->PaymentMethod = $mc_payment_method;
            } catch (MiniCRM_WooCommerce_Plugin_Exception $e) {}

            // Customer
            $billing = $customer_order ['billing'];
            $shipping = $customer_order ['shipping'];
            $customer = $order->addChild ('Customer');

            // Add shipping method
            $shipping_method_name = $order_obj->get_shipping_method ();
            $order_project = $order->addChild ('Project');
            $order_project->ShippingMethod = $shipping_method_name;

            $name = MiniCRM_WooCommerce_Plugin::get_customer_name (
                $locale,
                $customer_order
            );
            $customer->Name = $name;

            // Init empty customer data
            $customer_country = '';
            $customer_postalcode = '';
            $customer_city = '';
            $customer_address = '';

            // Use billing address for Customer if available
            if ($billing ['city'] !== '') {

                // Try to use billing country
                if ($billing ['country'] !== '') {
                    try {
                        $customer_country = MiniCRM_WooCommerce_Plugin::get_country (
                            $locale,
                            $billing ['country']
                        );
                    } catch (Exception $e) {}
                }

                // Fall back to the shop's base country
                else {
                    try {
                        $customer_country = MiniCRM_WooCommerce_Plugin::get_country (
                            $locale,
                            WC_Countries::get_base_country ()
                        );
                    } catch (Exception $e) {}
                }

                // Set other address fields only if country has been set
                if ($customer_country !== '') {
                    $customer_postalcode = $billing ['postcode'];
                    $customer_city = $billing ['city'];
                    $customer_address = "$billing[address_1] $billing[address_2]";
                }
            }

            // Use shipping address otherwise
            elseif ($shipping ['city'] !== '') {

                // Try to use shipping country
                if ($shipping ['country'] !== '') {
                    try {
                        $customer_country = MiniCRM_WooCommerce_Plugin::get_country (
                            $locale,
                            $shipping ['country']
                        );
                    } catch (Exception $e) {}
                }

                // Fall back to the shop's base country
                else {
                    try {
                        $customer_country = MiniCRM_WooCommerce_Plugin::get_country (
                            $locale,
                            WC_Countries::get_base_country ()
                        );
                    } catch (Exception $e) {}
                }

                // Set other address fields only if country has been set
                if ($customer_country !== '') {
                    $customer_postalcode = $shipping ['postcode'];
                    $customer_city = $shipping ['city'];
                    $customer_address = "$shipping[address_1] $shipping[address_2]";
                }
            }

            // Add Customer elements
            $customer->CountryId = $customer_country;
            $customer->PostalCode = $customer_postalcode;
            $customer->City = $customer_city;
            $customer->Address = trim ($customer_address);

            // Products
            $products = $order->addChild ('Products');
            foreach ($customer_order ['line_items'] as $item) {
                $item = $item->get_data ();
                $product_id = $item ['product_id'];
                $existing_products = $products->xpath (
                    "Product[@Id=\"$product_id\"]"
                );

                // Increment quantity of existing Product with same Id
                if (count ($existing_products)) {
                    $product = $existing_products [0];
                    $product->Quantity += $item ['quantity'];
                    continue;
                }

                // Create new product
                $product = $products->addChild ('Product');

                // Throw error when product ID exceeds predefined constant
                if ($product_id >= MiniCRM_WooCommerce_Plugin::DELETED_PRODUCT_ID) {
                    throw new Exception ("Product ID #$product_id exceeds predefined constant for deleted products.");
                }

                // Set pre-defined product ID for deleted products
                if (empty ($product_id)) {
                    $product_id = MiniCRM_WooCommerce_Plugin::DELETED_PRODUCT_ID;
                }

                $product->addAttribute ('Id', $product_id);
                $product->Name = $item ['name'];
                $product->PriceNet = $item ['subtotal'] / $item ['quantity'];
                $product->Quantity = $item ['quantity'];
                $product->addChild (
                    'Unit',
                    MiniCRM_WooCommerce_Plugin::get_local_unit ($locale)
                );
                if ($item ['subtotal'] === '0') {
                    $vat = 0;
                } else {
                    $vat = $item ['subtotal_tax'] / $item ['subtotal'];
                    $vat = round (100 * $vat);
                }
                $product->VAT = "$vat%";
                $product->FolderName = $folder_name;
            }

            // Coupons
            foreach ($customer_order ['coupon_lines'] as $item) {
                $coupon_data = $item->get_meta ('coupon_data', true);
                $product_id = $coupon_data ['id'];
                $existing_products = $products->xpath (
                    "Product[@Id=\"$product_id\"]"
                );

                // Increment quantity of existing Product with same Id
                if (count ($existing_products)) {
                    $product = $existing_products [0];
                    $product->Quantity += 1;
                    continue;
                }

                // Create new product
                $product = $products->addChild ('Product');

                // Throw error when product ID exceeds predefined constant
                if ($product_id >= MiniCRM_WooCommerce_Plugin::DELETED_PRODUCT_ID) {
                    throw new Exception ("Product ID #$product_id exceeds predefined constant for deleted products.");
                }

                $net_discount = $item->get_discount ();
                $discount_tax = $item->get_discount_tax ();
                $product->addAttribute ('Id', $product_id);
                $product->addChild ('Name', "Coupon '$coupon_data[code]'");
                $product->addChild ('PriceNet', -$net_discount);
                $product->addChild ('Quantity', 1);
                $product->addChild (
                    'Unit',
                    MiniCRM_WooCommerce_Plugin::get_local_unit ($locale)
                );
                if ($net_discount === '0') {
                    $vat = 0;
                } else {
                    $vat = round (100 * $discount_tax / $net_discount);
                }
                $product->addChild ('VAT', "$vat%");
                $product->addChild ('FolderName', $folder_name);
            }

            // Shipping cost
            $shipping_net = $order_obj->get_shipping_total ();
            if ($shipping_net !== '0') {
                $shipping_tax_amount = $order_obj->get_shipping_tax ();
                $shipping_tax_percentage = $shipping_tax_amount / $shipping_net;
                $shipping_tax_percentage = round (100 * $shipping_tax_percentage);
                $shipping_item = $products->addChild ('Product');
                $shipping_item->addAttribute ('Id', MiniCRM_WooCommerce_Plugin::DELETED_PRODUCT_ID);
                $shipping_item_name = MiniCRM_WooCommerce_Plugin::get_local_shipping_item_name ($locale);
                $shipping_item->Name = $shipping_item_name;
                $shipping_item->PriceNet = $shipping_net;
                $shipping_item->Quantity = 1;
                $shipping_item->Unit = MiniCRM_WooCommerce_Plugin::get_local_unit ($locale);
                $shipping_item->VAT = "$shipping_tax_percentage%";
                $shipping_item->FolderName = $folder_name;
            }
        }
    }

    // output
    if(ob_get_level()) ob_clean();
    header ('Content-Type: application/xml');
    exit ($projects->asXML ());
}
catch (Exception $e) {
    if (function_exists ('http_response_code')) {
        http_response_code (400);
    }
    header ('Content-Type: text/plain');
    exit ($e->getMessage ());
}
